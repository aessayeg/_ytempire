# ConfigMap for YTEmpire MVP
apiVersion: v1
kind: ConfigMap
metadata:
  name: ytempire-config
  namespace: ytempire-dev
  labels:
    app: ytempire
    tier: config
data:
  # Application configuration
  NODE_ENV: 'development'
  LOG_LEVEL: 'debug'
  APP_NAME: 'YTEmpire'
  APP_VERSION: '1.0.0-mvp'

  # API configuration
  API_BASE_URL: 'http://ytempire-backend:5000'
  API_VERSION: 'v1'
  API_TIMEOUT: '30000'

  # YouTube API configuration
  YOUTUBE_API_BASE_URL: 'https://www.googleapis.com/youtube/v3'
  YOUTUBE_UPLOAD_URL: 'https://www.googleapis.com/upload/youtube/v3'
  YOUTUBE_MAX_RESULTS: '50'

  # OpenAI configuration
  OPENAI_API_BASE_URL: 'https://api.openai.com/v1'
  OPENAI_MODEL: 'gpt-3.5-turbo'
  OPENAI_MAX_TOKENS: '2000'

  # Upload configuration
  MAX_FILE_SIZE: '104857600' # 100MB
  ALLOWED_FILE_TYPES: 'video/mp4,video/mpeg,video/quicktime,video/x-msvideo,video/x-flv,video/webm'
  THUMBNAIL_TYPES: 'image/jpeg,image/png,image/webp'

  # Cache configuration
  CACHE_TTL: '3600'
  CACHE_PREFIX: 'ytempire:'

  # Email configuration
  EMAIL_FROM_NAME: 'YTEmpire'
  EMAIL_FROM_ADDRESS: 'noreply@ytempire.local'

  # Frontend configuration
  NEXT_TELEMETRY_DISABLED: '1'
  NEXT_PUBLIC_ENABLE_DEBUG: 'true'

  # Analytics (optional)
  google-analytics-id: ''
  mixpanel-token: ''
---
# Backend application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: ytempire-dev
  labels:
    app: ytempire-backend
    tier: config
data:
  # Express server configuration
  server.js: |
    const express = require('express');
    const app = express();

    // Health check endpoint
    app.get('/health', (req, res) => {
      res.json({ status: 'OK', timestamp: new Date().toISOString() });
    });

    // Ready check endpoint
    app.get('/ready', async (req, res) => {
      try {
        // Check database connection
        // Check Redis connection
        res.json({ ready: true });
      } catch (error) {
        res.status(503).json({ ready: false, error: error.message });
      }
    });

    module.exports = app;

  # PM2 ecosystem configuration
  ecosystem.config.js: |
    module.exports = {
      apps: [{
        name: 'ytempire-backend',
        script: './server.js',
        instances: 1,
        exec_mode: 'cluster',
        env: {
          NODE_ENV: 'development'
        },
        error_file: '/app/logs/error.log',
        out_file: '/app/logs/out.log',
        log_file: '/app/logs/combined.log',
        time: true
      }]
    };
---
# Frontend configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: ytempire-dev
  labels:
    app: ytempire-frontend
    tier: config
data:
  # Next.js configuration
  next.config.js: |
    module.exports = {
      reactStrictMode: true,
      swcMinify: true,
      images: {
        domains: ['i.ytimg.com', 'yt3.ggpht.com', 'localhost'],
      },
      env: {
        NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
      },
      async rewrites() {
        return [
          {
            source: '/api/:path*',
            destination: `${process.env.NEXT_PUBLIC_API_URL}/api/:path*`,
          },
        ];
      },
    };

  # Health check API route
  api-health.js: |
    export default function handler(req, res) {
      res.status(200).json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV
      });
    }
