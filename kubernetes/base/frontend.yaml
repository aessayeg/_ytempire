# Frontend deployment configuration for YTEmpire MVP
apiVersion: v1
kind: Service
metadata:
  name: ytempire-frontend
  namespace: ytempire-dev
  labels:
    app: ytempire-frontend
    tier: frontend
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: ytempire-frontend
    tier: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ytempire-frontend
  namespace: ytempire-dev
  labels:
    app: ytempire-frontend
    tier: frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ytempire-frontend
      tier: frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: ytempire-frontend
        tier: frontend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: ytempire-frontend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: frontend
        image: ytempire/frontend:dev
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "development"
        - name: NEXT_PUBLIC_API_URL
          value: "http://ytempire-backend:5000"
        - name: NEXT_PUBLIC_APP_NAME
          value: "YTEmpire"
        - name: NEXT_PUBLIC_APP_VERSION
          value: "1.0.0-mvp"
        - name: NEXT_PUBLIC_WEBSOCKET_URL
          value: "ws://ytempire-backend:5000"
        - name: NEXT_PUBLIC_GOOGLE_ANALYTICS_ID
          valueFrom:
            configMapKeyRef:
              name: ytempire-config
              key: google-analytics-id
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
        volumeMounts:
        - name: nextjs-cache
          mountPath: /app/.next/cache
      initContainers:
      - name: wait-for-backend
        image: busybox:latest
        command: ['sh', '-c', 'until nc -z ytempire-backend 5000; do echo waiting for backend; sleep 2; done;']
      volumes:
      - name: nextjs-cache
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ytempire-frontend
  namespace: ytempire-dev
  labels:
    app: ytempire-frontend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ytempire-frontend-hpa
  namespace: ytempire-dev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ytempire-frontend
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60