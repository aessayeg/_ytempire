name: Security and Compliance

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - containers
          - infrastructure
          - compliance

env:
  NODE_VERSION: '18'
  SECURITY_REPORT_PATH: security-reports
  SEVERITY_THRESHOLD: 'CRITICAL,HIGH'

jobs:
  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: NPM Audit - Backend
        working-directory: ./backend
        run: |
          echo "# Backend Dependency Audit" > ../backend-audit.md
          echo "## NPM Audit Results" >> ../backend-audit.md

          # Run npm audit
          npm audit --json > audit.json || true

          # Parse results
          if [ -f audit.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
            MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit.json)
            LOW=$(jq '.metadata.vulnerabilities.low // 0' audit.json)
            
            echo "- Critical: $CRITICAL" >> ../backend-audit.md
            echo "- High: $HIGH" >> ../backend-audit.md
            echo "- Moderate: $MODERATE" >> ../backend-audit.md
            echo "- Low: $LOW" >> ../backend-audit.md
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "::warning::Backend has $CRITICAL critical and $HIGH high vulnerabilities"
            fi
          fi

          # Try to fix automatically
          npm audit fix --force || true

      - name: NPM Audit - Frontend
        working-directory: ./frontend
        run: |
          echo "# Frontend Dependency Audit" > ../frontend-audit.md
          echo "## NPM Audit Results" >> ../frontend-audit.md

          # Run npm audit
          npm audit --json > audit.json || true

          # Parse results
          if [ -f audit.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
            MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit.json)
            LOW=$(jq '.metadata.vulnerabilities.low // 0' audit.json)
            
            echo "- Critical: $CRITICAL" >> ../frontend-audit.md
            echo "- High: $HIGH" >> ../frontend-audit.md
            echo "- Moderate: $MODERATE" >> ../frontend-audit.md
            echo "- Low: $LOW" >> ../frontend-audit.md
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "::warning::Frontend has $CRITICAL critical and $HIGH high vulnerabilities"
            fi
          fi

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'YTEmpire'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental

      - name: License Compliance Check
        run: |
          echo "## License Compliance" > license-compliance.md

          # Check backend licenses
          cd backend
          npx license-checker --production --json > ../backend-licenses.json || true

          # Check frontend licenses
          cd ../frontend
          npx license-checker --production --json > ../frontend-licenses.json || true

          cd ..

          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL|AGPL|LGPL|SSPL|Commons Clause"

          echo "### Backend Licenses" >> license-compliance.md
          if [ -f backend-licenses.json ]; then
            jq -r 'to_entries[] | "\(.key): \(.value.licenses)"' backend-licenses.json | grep -E "$PROBLEMATIC_LICENSES" || echo "No problematic licenses found" >> license-compliance.md
          fi

          echo "### Frontend Licenses" >> license-compliance.md
          if [ -f frontend-licenses.json ]; then
            jq -r 'to_entries[] | "\(.key): \(.value.licenses)"' frontend-licenses.json | grep -E "$PROBLEMATIC_LICENSES" || echo "No problematic licenses found" >> license-compliance.md
          fi

      - name: Upload Dependency Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            *-audit.md
            *-licenses.json
            license-compliance.md
            dependency-check-report.*

  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container Image
        run: |
          docker build -t ytempire-${{ matrix.service }}:scan \
            -f ./${{ matrix.service }}/Dockerfile.dev \
            ./${{ matrix.service }}

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ytempire-${{ matrix.service }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: ${{ env.SEVERITY_THRESHOLD }}
          vuln-type: 'os,library'

      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'container-${{ matrix.service }}'

      - name: Container Best Practices Check
        run: |
          echo "# Container Security Best Practices - ${{ matrix.service }}" > container-practices-${{ matrix.service }}.md

          # Check for root user
          if docker run --rm --entrypoint="" ytempire-${{ matrix.service }}:scan id 2>/dev/null | grep -q "uid=0"; then
            echo "❌ Container runs as root user" >> container-practices-${{ matrix.service }}.md
          else
            echo "✅ Container runs as non-root user" >> container-practices-${{ matrix.service }}.md
          fi

          # Check for exposed secrets
          docker history ytempire-${{ matrix.service }}:scan --no-trunc | grep -E "(PASSWORD|SECRET|KEY|TOKEN)" && echo "⚠️ Potential secrets in image layers" >> container-practices-${{ matrix.service }}.md || echo "✅ No secrets detected in image layers" >> container-practices-${{ matrix.service }}.md

      - name: Upload Container Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: container-security-${{ matrix.service }}
          path: |
            trivy-${{ matrix.service }}.sarif
            container-practices-${{ matrix.service }}.md

  secret-scanning:
    name: Secret and Credential Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Custom Secret Patterns
        run: |
          echo "# Custom Secret Pattern Scan" > secret-scan.md
          echo "## Scanning for custom patterns..." >> secret-scan.md

          # Define patterns to search for
          PATTERNS=(
            "sk_live_[0-9a-zA-Z]{24}"  # Stripe
            "AIza[0-9A-Za-z\\-_]{35}"   # Google API
            "ya29\\.[0-9A-Za-z\\-_]+"   # Google OAuth
            "xox[baprs]-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}"  # Slack
          )

          for pattern in "${PATTERNS[@]}"; do
            echo "Checking pattern: $pattern" >> secret-scan.md
            grep -r -E "$pattern" --exclude-dir=node_modules --exclude-dir=.git . || echo "No matches found" >> secret-scan.md
          done

      - name: Check Environment Files
        run: |
          echo "## Environment File Security" >> secret-scan.md

          # Check for .env files in repo
          if find . -name ".env*" -not -path "*/node_modules/*" -not -path "*/.git/*" | grep -q .; then
            echo "⚠️ WARNING: .env files found in repository" >> secret-scan.md
            find . -name ".env*" -not -path "*/node_modules/*" -not -path "*/.git/*" >> secret-scan.md
          else
            echo "✅ No .env files in repository" >> secret-scan.md
          fi

      - name: Upload Secret Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-reports
          path: secret-scan.md

  infrastructure-security:
    name: Infrastructure Security Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'infrastructure' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Compose Security Check
        run: |
          echo "# Docker Compose Security Assessment" > docker-security.md
          echo "## Security Configuration Check" >> docker-security.md

          # Check for exposed ports
          echo "### Exposed Ports" >> docker-security.md
          grep -E "ports:" docker-compose*.yml | while read -r line; do
            echo "- $line" >> docker-security.md
          done

          # Check for privileged containers
          echo "### Privileged Containers" >> docker-security.md
          grep -E "privileged: true" docker-compose*.yml && echo "⚠️ Privileged containers detected" >> docker-security.md || echo "✅ No privileged containers" >> docker-security.md

          # Check for volume mounts
          echo "### Volume Mounts" >> docker-security.md
          grep -E "volumes:" docker-compose*.yml -A 5 | grep -E "^[ ]*-" | while read -r line; do
            if echo "$line" | grep -q "/var/run/docker.sock"; then
              echo "⚠️ Docker socket mounted: $line" >> docker-security.md
            fi
          done

      - name: Network Security Assessment
        run: |
          echo "## Network Security" >> docker-security.md

          # Check for custom networks
          echo "### Custom Networks" >> docker-security.md
          grep -E "networks:" docker-compose*.yml | head -5 >> docker-security.md

          # Check for exposed databases
          echo "### Database Exposure" >> docker-security.md
          if grep -E "5432:5432|3306:3306|27017:27017" docker-compose*.yml; then
            echo "⚠️ Database ports exposed to host" >> docker-security.md
          else
            echo "✅ Database ports not directly exposed" >> docker-security.md
          fi

      - name: Upload Infrastructure Reports
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-security
          path: docker-security.md

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: '/language:javascript'

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/nodejs
            p/react

      - name: ESLint Security Plugin
        working-directory: ./backend
        run: |
          npm install --save-dev eslint-plugin-security || true
          npx eslint --plugin security --rule 'security/detect-object-injection: error' src/ || true

      - name: Upload SAST Reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            .semgrep/
            eslint-security-report.json

  compliance-assessment:
    name: Security Compliance Assessment
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'compliance' || github.event.inputs.scan_type == ''

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: OWASP Top 10 Compliance
        run: |
          echo "# OWASP Top 10 Compliance Report" > owasp-compliance.md
          echo "## Assessment Date: $(date)" >> owasp-compliance.md
          echo "" >> owasp-compliance.md

          echo "### A01:2021 – Broken Access Control" >> owasp-compliance.md
          grep -r "JWT\|jsonwebtoken\|passport" --include="*.js" . > /dev/null && echo "✅ JWT authentication implemented" >> owasp-compliance.md || echo "⚠️ Authentication implementation review needed" >> owasp-compliance.md

          echo "### A02:2021 – Cryptographic Failures" >> owasp-compliance.md
          grep -r "bcrypt\|crypto" --include="*.js" . > /dev/null && echo "✅ Password hashing implemented" >> owasp-compliance.md || echo "⚠️ Cryptography implementation review needed" >> owasp-compliance.md

          echo "### A03:2021 – Injection" >> owasp-compliance.md
          grep -r "express-validator\|joi\|yup" --include="*.js" . > /dev/null && echo "✅ Input validation libraries detected" >> owasp-compliance.md || echo "⚠️ Input validation review needed" >> owasp-compliance.md

          echo "### A04:2021 – Insecure Design" >> owasp-compliance.md
          [ -f "docs/architecture/security-architecture.md" ] && echo "✅ Security architecture documented" >> owasp-compliance.md || echo "⚠️ Security architecture documentation missing" >> owasp-compliance.md

          echo "### A05:2021 – Security Misconfiguration" >> owasp-compliance.md
          grep -r "helmet\|cors" --include="*.js" . > /dev/null && echo "✅ Security headers middleware detected" >> owasp-compliance.md || echo "⚠️ Security headers review needed" >> owasp-compliance.md

          echo "### A06:2021 – Vulnerable Components" >> owasp-compliance.md
          echo "See dependency scanning results" >> owasp-compliance.md

          echo "### A07:2021 – Identification and Authentication Failures" >> owasp-compliance.md
          grep -r "express-rate-limit\|rate-limit" --include="*.js" . > /dev/null && echo "✅ Rate limiting detected" >> owasp-compliance.md || echo "⚠️ Rate limiting review needed" >> owasp-compliance.md

          echo "### A08:2021 – Software and Data Integrity Failures" >> owasp-compliance.md
          [ -f ".github/workflows/ci.yml" ] && echo "✅ CI/CD pipeline configured" >> owasp-compliance.md || echo "⚠️ CI/CD pipeline review needed" >> owasp-compliance.md

          echo "### A09:2021 – Security Logging and Monitoring Failures" >> owasp-compliance.md
          grep -r "winston\|morgan\|pino" --include="*.js" . > /dev/null && echo "✅ Logging libraries detected" >> owasp-compliance.md || echo "⚠️ Logging implementation review needed" >> owasp-compliance.md

          echo "### A10:2021 – Server-Side Request Forgery" >> owasp-compliance.md
          echo "Manual review required" >> owasp-compliance.md

      - name: Generate Compliance Score
        run: |
          echo "## Compliance Score" >> owasp-compliance.md
          echo "" >> owasp-compliance.md

          PASSED=$(grep -c "✅" owasp-compliance.md || echo 0)
          WARNINGS=$(grep -c "⚠️" owasp-compliance.md || echo 0)
          FAILED=$(grep -c "❌" owasp-compliance.md || echo 0)
          TOTAL=$((PASSED + WARNINGS + FAILED))

          if [ $TOTAL -gt 0 ]; then
            SCORE=$((PASSED * 100 / TOTAL))
            echo "- Overall Score: ${SCORE}%" >> owasp-compliance.md
            echo "- Passed: $PASSED" >> owasp-compliance.md
            echo "- Warnings: $WARNINGS" >> owasp-compliance.md
            echo "- Failed: $FAILED" >> owasp-compliance.md
          fi

      - name: Upload Compliance Reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: owasp-compliance.md

  security-summary:
    name: Generate Security Summary
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scanning,
        container-security,
        secret-scanning,
        infrastructure-security,
        sast-analysis,
        compliance-assessment,
      ]
    if: always()

    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate Executive Summary
        run: |
          echo "# YTEmpire Security Assessment Report" > security-summary.md
          echo "## Executive Summary" >> security-summary.md
          echo "**Assessment Date:** $(date)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "**Triggered by:** ${{ github.actor }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Assessment Results" >> security-summary.md
          echo "" >> security-summary.md

          echo "| Category | Status | Details |" >> security-summary.md
          echo "|----------|--------|---------|" >> security-summary.md
          echo "| Dependency Scanning | ${{ needs.dependency-scanning.result }} | View dependency reports |" >> security-summary.md
          echo "| Container Security | ${{ needs.container-security.result }} | View container reports |" >> security-summary.md
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} | View secret scan reports |" >> security-summary.md
          echo "| Infrastructure Security | ${{ needs.infrastructure-security.result }} | View infrastructure reports |" >> security-summary.md
          echo "| SAST Analysis | ${{ needs.sast-analysis.result }} | View SAST reports |" >> security-summary.md
          echo "| Compliance Assessment | ${{ needs.compliance-assessment.result }} | View compliance reports |" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review and remediate all critical and high severity vulnerabilities" >> security-summary.md
          echo "2. Update dependencies to latest secure versions" >> security-summary.md
          echo "3. Implement missing security headers" >> security-summary.md
          echo "4. Review and rotate any exposed credentials" >> security-summary.md
          echo "5. Schedule regular security assessments" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
